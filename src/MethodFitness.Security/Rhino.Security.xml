<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MethodFitness.Security</name>
    </assembly>
    <members>
        <member name="T:MethodFitness.Security.Impl.Guard">
            <summary>
            Helper class for guard statements, which allow prettier
            code for guard clauses
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Impl.Guard.Against(System.Boolean,System.String)">
            <summary>
            Will throw a <see cref="T:System.InvalidOperationException"/> if the assertion
            is true, with the specificied message.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <example>
            Sample usage:
            <code>
            Guard.Against(string.IsNullOrEmpty(name), "Name must have a value");
            </code>
            </example>
        </member>
        <member name="M:MethodFitness.Security.Impl.Guard.Against``1(System.Boolean,System.String)">
            <summary>
            Will throw exception of type <typeparamref name="TException"/>
            with the specified message if the assertion is true
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <example>
            Sample usage:
            <code>
            <![CDATA[
            Guard.Against<ArgumentException>(string.IsNullOrEmpty(name), "Name must have a value");
            ]]>
            </code>
            </example>
        </member>
        <member name="T:MethodFitness.Security.Impl.MappingRewriting.SchemaChanger">
            <summary>
            Modify the NH configuration to set the correct schema
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Impl.MappingRewriting.SchemaChanger.#ctor(NHibernate.Cfg.Configuration,MethodFitness.Security.SecurityTableStructure)">
            <summary>
            Initializes a new instance of the <see cref="T:MethodFitness.Security.Impl.MappingRewriting.SchemaChanger"/> class.
            </summary>
            <param name="cfg">The NHibernte configuration.</param>
            <param name="tableStructure">The table structure.</param>
        </member>
        <member name="M:MethodFitness.Security.Impl.MappingRewriting.SchemaChanger.Change">
            <summary>
            Modify the configuration so it would set the schema or prefix based on the selected
            table structure
            </summary>
        </member>
        <member name="T:MethodFitness.Security.Impl.MappingRewriting.UserMapper">
            <summary>
            Map <seealso cref="T:MethodFitness.Security.IUser"/> to the domain model implementation of the User entity.
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Impl.MappingRewriting.UserMapper.#ctor(NHibernate.Cfg.Configuration,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MethodFitness.Security.Impl.MappingRewriting.UserMapper"/> class.
            </summary>
            <param name="cfg">The NHibernate configuration.</param>
            <param name="userType">Type of the user.</param>
        </member>
        <member name="M:MethodFitness.Security.Impl.MappingRewriting.UserMapper.Map">
            <summary>
            Modify the configuration so it would set all the references to <see cref="T:MethodFitness.Security.IUser"/>
            to userEntityName.
            </summary>
        </member>
        <member name="T:MethodFitness.Security.Model.NamedEntity`1">
            <summary>
            An entity with a name
            </summary>
        </member>
        <member name="T:MethodFitness.Security.Model.EqualityAndHashCodeProvider`1">
            <summary>
            This is a trivial class that is used to make sure that Equals and GetHashCode
            are properly overloaded with the correct semantics. This is exteremely important
            if you are going to deal with objects outside the current Unit of Work.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MethodFitness.Security.Interfaces.IIDentifiable">
            <summary>
            Mark an entity with an id
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Interfaces.IIDentifiable.EntityId">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="M:MethodFitness.Security.Model.EqualityAndHashCodeProvider`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:MethodFitness.Security.Model.EqualityAndHashCodeProvider`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:MethodFitness.Security.Model.EqualityAndHashCodeProvider`1.op_Equality(MethodFitness.Security.Model.EqualityAndHashCodeProvider{`0},MethodFitness.Security.Model.EqualityAndHashCodeProvider{`0})">
            <summary>
            Equality operator so we can have == semantics
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Model.EqualityAndHashCodeProvider`1.op_Inequality(MethodFitness.Security.Model.EqualityAndHashCodeProvider{`0},MethodFitness.Security.Model.EqualityAndHashCodeProvider{`0})">
            <summary>
            Inequality operator so we can have != semantics
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Model.EqualityAndHashCodeProvider`1.EntityId">
            <summary>
            Gets or sets the id of this entity
            </summary>
            <value>The id.</value>
        </member>
        <member name="M:MethodFitness.Security.Model.NamedEntity`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:MethodFitness.Security.Model.NamedEntity`1.Name">
            <summary>
            Gets or sets the name of this entity.
            </summary>
            <value>The name.</value>
            <remarks>
            The name can be set only on creation, and is not changed
            afterward.
            </remarks>
        </member>
        <member name="T:MethodFitness.Security.Services.SecurityCriterions">
            <summary>
            A factory for common DetachedCriteria.
            </summary>
        </member>
        <member name="T:MethodFitness.Security.Services.AuthorizationRepository">
            <summary>
            Allows to edit the security information of the 
            system
            </summary>
        </member>
        <member name="T:MethodFitness.Security.Interfaces.IAuthorizationRepository">
            <summary>
            Allows to edit the security information of the 
            system
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.CreateUsersGroup(System.String)">
            <summary>
            Creates a new users group.
            </summary>
            <param name="name">The name of the new group.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.GetAssociatedUsersGroupFor(MethodFitness.Security.IUser)">
            <summary>
            Gets the associated users group for the specified user.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.GetUsersGroupByName(System.String)">
            <summary>
            Gets the users group by its name
            </summary>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.GetUsersGroupById(System.Int32)">
            <summary>
            Gets the users group by its id
            </summary>
            <param name="id">id of the group.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.AssociateUserWith(MethodFitness.Security.IUser,System.String)">
            <summary>
            Associates the user with a group with the specified name
            </summary>
            <param name="user">The user.</param>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.AssociateUserWith(MethodFitness.Security.IUser,MethodFitness.Security.Model.UsersGroup)">
            <summary>
            Associates the user with a group with the specified name
            </summary>
            <param name="user">The user.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.CreateOperation(System.String)">
            <summary>
            Creates the operation with the given name
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.GetOperationByName(System.String)">
            <summary>
            Gets the operation by the specified name
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.DetachUserFromGroup(MethodFitness.Security.IUser,System.String)">
            <summary>
            Removes the user from the specified group
            </summary>
            <param name="user">The user.</param>
            <param name="usersGroupName">Name of the users group.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.CreateChildUserGroupOf(System.String,System.String)">
            <summary>
            Creates the users group as a child of <paramref name="parentGroupName"/>.
            </summary>
            <param name="parentGroupName">Name of the parent group.</param>
            <param name="usersGroupName">Name of the users group.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.GetAncestryAssociation(MethodFitness.Security.IUser,System.String)">
            <summary>
            Gets the ancestry association of a user with the named users group.
            This allows to track how a user is associated to a group through 
            their ancestry.
            </summary>
            <param name="user">The user.</param>
            <param name="usersGroupName">Name of the users group.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.RemoveUsersGroup(System.String)">
            <summary>
            Removes the specified users group.
            Cannot remove parent users groups, you must remove them first.
            Will also delete all permissions that are related to this group.
            </summary>
            <param name="usersGroupName">Name of the users group.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.RemoveOperation(System.String)">
            <summary>
            Removes the specified operation.
            Will also delete all permissions for this operation
            </summary>
            <param name="operationName">The operation N ame.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.RemoveUser(MethodFitness.Security.IUser)">
            <summary>
            Removes the user from rhino security.
            This does NOT delete the user itself, merely reset all the
            information that rhino security knows about it.
            It also allows it to be removed by external API without violating
            FK constraints
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.RemovePermission(MethodFitness.Security.Model.Permission)">
            <summary>
            Removes the specified permission.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.RenameUsersGroup(System.String,System.String)">
            <summary>
             Renames an existing users group
            </summary>
            <param name="usersGroupName">The name of the usersgroup to rename</param>
            <param name="newName">The new name of the usersgroup</param>
            <returns>The renamed group</returns> 
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.GetAllUsersGroups">
            <summary>
            Gets all user groups ordered by name
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.GetAllOperations">
            <summary>
            Gets all the operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.GetOperationById(System.Int32)">
            <summary>
            Gets the operation by the specified EntityId
            </summary>
            <param name="operationId">EntityId of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationRepository.UpdateUsersGroup(MethodFitness.Security.Model.UsersGroup)">
            <summary>
            
            </summary>
            <param name="usersGroup"></param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.#ctor(NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:MethodFitness.Security.Services.AuthorizationRepository"/> class.
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.CreateUsersGroup(System.String)">
            <summary>
            Creates a new users group.
            </summary>
            <param name="name">The name of the new group.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.CreateChildUserGroupOf(System.String,System.String)">
            <summary>
            Creates the users group as a child of <paramref name="parentGroupName"/>.
            </summary>
            <param name="parentGroupName">Name of the parent group.</param>
            <param name="usersGroupName">Name of the users group.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.RemoveUsersGroup(System.String)">
            <summary>
            temporary string
            </summary>
            <param name="usersGroupName">Name of the users group.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.RenameUsersGroup(System.String,System.String)">
            <summary>
             Renames an existing users group
            </summary>
            <param name="usersGroupName">The name of the usersgroup to rename</param>
            <param name="newName">The new name of the usersgroup</param>
            <returns>The renamed group</returns>       
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.UpdateUsersGroup(MethodFitness.Security.Model.UsersGroup)">
            <summary>
            
            </summary>
            <param name="usersGroup"></param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.RemoveOperation(System.String)">
            <summary>
            Removes the specified operation.
            Will also delete all permissions for this operation
            </summary>
            <param name="operationName">The operation N ame.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.GetAncestryAssociation(MethodFitness.Security.IUser,System.String)">
            <summary>
            Gets the ancestry association of a user with the named users group.
            This allows to track how a user is associated to a group through 
            their ancestry.
            </summary>
            <param name="user">The user.</param>
            <param name="usersGroupName">Name of the users group.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.GetAssociatedUsersGroupFor(MethodFitness.Security.IUser)">
            <summary>
            Gets the associated users group for the specified user.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.GetUsersGroupByName(System.String)">
            <summary>
            Gets the users group by its name
            </summary>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.GetUsersGroupById(System.Int32)">
            <summary>
            Gets the users group by its id
            </summary>
            <param name="id">id of the group.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.GetAllUsersGroups">
            <summary>
            Gets all user groups ordered by name
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.AssociateUserWith(MethodFitness.Security.IUser,System.String)">
            <summary>
            Associates the user with a group with the specified name
            </summary>
            <param name="user">The user.</param>
            <param name="groupName">Name of the group.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.AssociateUserWith(MethodFitness.Security.IUser,MethodFitness.Security.Model.UsersGroup)">
            <summary>
            Associates the user with a group with the specified name
            </summary>
            <param name="user">The user.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.CreateOperation(System.String)">
            <summary>
            Creates the operation with the given name
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.GetOperationByName(System.String)">
            <summary>
            Gets the operation by the specified name
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.GetOperationById(System.Int32)">
            <summary>
            Gets the operation by the specified EntityId
            </summary>
            <param name="operationId">EntityId of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.GetAllOperations">
            <summary>
            Gets all the operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.DetachUserFromGroup(MethodFitness.Security.IUser,System.String)">
            <summary>
            Removes the user from the specified group
            </summary>
            <param name="user">The user.</param>
            <param name="usersGroupName">Name of the users group.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.RemoveUser(MethodFitness.Security.IUser)">
            <summary>
            Removes the user from rhino security.
            This does NOT delete the user itself, merely reset all the
            information that rhino security knows about it.
            It also allows it to be removed by external API without violating
            FK constraints
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationRepository.RemovePermission(MethodFitness.Security.Model.Permission)">
            <summary>
            Removes the specified permission.
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:MethodFitness.Security.AuthorizationInformation">
            <summary>
            Authorization Information relating to a specific 
            user/operation/entity.
            Allows to display the reasons for granting/denying permissions
            </summary>
        </member>
        <member name="M:MethodFitness.Security.AuthorizationInformation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:MethodFitness.Security.AuthorizationInformation.AddAllow(System.String,System.Object[])">
            <summary>
            Adds the specified formatted message that explains 
            why permission was allowed
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:MethodFitness.Security.AuthorizationInformation.AddDeny(System.String,System.Object[])">
            <summary>
            Adds the specified formatted message that explains 
            why permission was denied
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:MethodFitness.Security.Services.AuthorizationService">
            <summary>
            Answers authorization questions as well as enhance Criteria
            queries
            </summary>
        </member>
        <member name="T:MethodFitness.Security.Interfaces.IAuthorizationService">
            <summary>
             Implementors of this interface are able to answer
             on authorization questions as well as enhance Criteria
             queries
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationService.IsAllowed(MethodFitness.Security.IUser,System.String)">
            <summary>
            Determines whether the specified user is allowed to perform the
            specified operation on the entity.
            </summary>
            <param name="user">The user.</param>
            <param name="operation">The operation.</param>
            <returns>
            	<c>true</c> if the specified user is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IAuthorizationService.GetAuthorizationInformation(MethodFitness.Security.IUser,System.String)">
            <summary>
            Gets the authorization information for the specified user and operation,
            allows to easily understand why a given operation was granted / denied.
            </summary>
            <param name="user">The user.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationService.#ctor(MethodFitness.Security.Interfaces.IPermissionsService,MethodFitness.Security.Interfaces.IAuthorizationRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MethodFitness.Security.Services.AuthorizationService"/> class.
            </summary>
            <param name="permissionsService">The permissions service.</param>
            <param name="authorizationRepository">The authorization editing service.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationService.IsAllowed(MethodFitness.Security.IUser,System.String)">
            <summary>
            Determines whether the specified user is allowed to perform the
            specified operation on the entity.
            </summary>
            <param name="user">The user.</param>
            <param name="operation">The operation.</param>
            <returns>
            	<c>true</c> if the specified user is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MethodFitness.Security.Services.AuthorizationService.GetAuthorizationInformation(MethodFitness.Security.IUser,System.String)">
            <summary>
            Gets the authorization information for the specified user and operation,
            allows to easily understand why a given operation was granted / denied.
            </summary>
            <param name="user">The user.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="T:MethodFitness.Security.Interfaces.IForPermissionBuilder">
            <summary>
            Define who this permission is for
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IForPermissionBuilder.For(MethodFitness.Security.IUser)">
            <summary>
            Set the user that this permission is built for
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IForPermissionBuilder.For(MethodFitness.Security.Model.UsersGroup)">
            <summary>
            Set the users group that this permission is built for
            </summary>
            <param name="group">The group.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IForPermissionBuilder.For(System.String)">
            <summary>
            Set the users group that this permission is built for
            </summary>
            <param name="usersGroupName">Name of the users group.</param>
            <returns></returns>
        </member>
        <member name="T:MethodFitness.Security.Interfaces.ILevelPermissionBuilder">
            <summary>
            Define what is the level of this permission
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.ILevelPermissionBuilder.Level(System.Int32)">
            <summary>
            Define the level of this permission
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.ILevelPermissionBuilder.DefaultLevel">
            <summary>
            Define the default level;
            </summary>
            <returns></returns>
        </member>
        <member name="T:MethodFitness.Security.Interfaces.IOnPermissionBuilder">
            <summary>
            Define who this permission is on
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IOnPermissionBuilder.OnEverything">
            <summary>
            Set this permission to be application to everything
            </summary>
            <returns></returns>
        </member>
        <member name="T:MethodFitness.Security.Interfaces.IPermissionBuilder">
            <summary>
            Save the created permission
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionBuilder.Description(System.String)">
            <summary>
            
            </summary>
            <param name="description">the description for this permission</param>
            <returns>IPermissionBuilder</returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionBuilder.Save">
            <summary>
            Save the created permission
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionBuilder.Build">
            <summary>
            Builds a permission without saving
            </summary>
        </member>
        <member name="T:MethodFitness.Security.Interfaces.IPermissionsBuilderService">
            <summary>
            Allow to define permissions using a fluent interface
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsBuilderService.Allow(System.String)">
            <summary>
            Allow permission for the specified operation.
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsBuilderService.Deny(System.String)">
            <summary>
            Deny permission for the specified operation 
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsBuilderService.Allow(System.Int32)">
            <summary>
            Allow permission for the specified operation.
            </summary>
            <param name="operationId">ID of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsBuilderService.Deny(System.Int32)">
            <summary>
            Deny permission for the specified operation 
            </summary>
            <param name="operationId">EntityId of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsBuilderService.Allow(MethodFitness.Security.Model.Operation)">
            <summary>
            Allow permission for the specified operation.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsBuilderService.Deny(MethodFitness.Security.Model.Operation)">
            <summary>
            Deny permission for the specified operation 
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsBuilderService.Save(MethodFitness.Security.Model.Permission)">
            <summary>
            Save Permission with out using fluent interface
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="T:MethodFitness.Security.Interfaces.IPermissionsService">
            <summary>
            Allow to retrieve and remove permissions
            on users, user groups, entities groups and entities.
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsService.GetPermissionsFor(MethodFitness.Security.IUser)">
            <summary>
            Gets the permissions for the specified user
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsService.GetGlobalPermissionsFor(MethodFitness.Security.IUser,System.String)">
            <summary>
            Gets the permissions for the specified entity
            </summary>
            <param name="user">The user.</param>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsService.GetPermissionsFor(System.String)">
            <summary>
            Gets all permissions for the specified operation
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsService.GetPermissionsFor(MethodFitness.Security.Model.UsersGroup)">
            <summary>
            Gets the permissions for the specified usergroup
            </summary>
            <param name="userGroup">The usersGroup.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Interfaces.IPermissionsService.GetPermission(System.Int32)">
            <summary>
            RH 4/9/12
            Gets permissions By Permission id
            </summary>
            <param name="permissionId">Guid EntityId for Permission </param>
            <returns></returns>
        </member>
        <member name="T:MethodFitness.Security.Services.PermissionsBuilderService">
            <summary>
            Allow to define permissions using a fluent interface
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.#ctor(NHibernate.ISession,MethodFitness.Security.Interfaces.IAuthorizationRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:MethodFitness.Security.Services.PermissionsBuilderService"/> class.
            </summary>
            <param name="session">The nhibernate session</param>
            <param name="authorizationRepository">The authorization editing service.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.Save(MethodFitness.Security.Model.Permission)">
            <summary>
            Saves the specified permission
            </summary>
            <param name="permission">The permission.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.Allow(System.Int32)">
            <summary>
            Allow permission for the specified operation.
            </summary>
            <param name="operationId">EntityId of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.Deny(System.Int32)">
            <summary>
            Deny permission for the specified operation 
            </summary>
            <param name="operationId">EntityId of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.Allow(System.String)">
            <summary>
            Allow permission for the specified operation.
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.Deny(System.String)">
            <summary>
            Deny permission for the specified operation 
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.Allow(MethodFitness.Security.Model.Operation)">
            <summary>
            Allow permission for the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.Deny(MethodFitness.Security.Model.Operation)">
            <summary>
            Deny permission for the specified operation
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="T:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder">
            <summary>
            Builds a permission
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.#ctor(MethodFitness.Security.Services.PermissionsBuilderService,System.Boolean,MethodFitness.Security.Model.Operation)">
            <summary>
            Initializes a new instance of the <see cref="T:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder"/> class.
            </summary>
            <param name="permissionBuilderService">The permission service.</param>
            <param name="allow">if set to <c>true</c> create an allow permission.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.Description(System.String)">
            <summary>
            Define the description fir this permission
            </summary>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.Save">
            <summary>
            Save the created permission
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.Build">
            <summary>
            Builds a permission without saving
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.For(MethodFitness.Security.IUser)">
            <summary>
            Set the user that this permission is built for
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.For(System.String)">
            <summary>
            Set the users group that this permission is built for
            </summary>
            <param name="usersGroupName">Name of the users group.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.For(MethodFitness.Security.Model.UsersGroup)">
            <summary>
            Set the users group that this permission is built for
            </summary>
            <param name="usersGroup">The users group.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.OnEverything">
            <summary>
            Set this permission to be application to everything
            </summary>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.Level(System.Int32)">
            <summary>
            Define the level of this permission
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsBuilderService.FluentPermissionBuilder.DefaultLevel">
            <summary>
            Define the default level;
            </summary>
            <returns></returns>
        </member>
        <member name="T:MethodFitness.Security.Services.PermissionsService">
            <summary>
            Allow to retrieve and remove permissions
            on users, user groups, entities groups and entities.
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsService.#ctor(MethodFitness.Security.Interfaces.IAuthorizationRepository,NHibernate.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:MethodFitness.Security.Services.PermissionsService"/> class.
            </summary>
            <param name="authorizationRepository">The authorization editing service.</param>
            <param name="session">The NHibernate session</param>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsService.GetPermissionsFor(MethodFitness.Security.IUser)">
            <summary>
            Gets the permissions for the specified user
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsService.GetPermissionsFor(MethodFitness.Security.Model.UsersGroup)">
            <summary>
            Gets the permissions for the specified usergroup
            </summary>
            <param name="userGroup">The usersGroup.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsService.GetGlobalPermissionsFor(MethodFitness.Security.IUser,System.String)">
            <summary>
            Gets the permissions for the specified entity
            </summary>
            <param name="user">The user.</param>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsService.GetPermission(System.Int32)">
            <summary>
            RH 4/9/12
            Gets permissions By Permission id
            </summary>
            <param name="permissionId">Guid EntityId for Permission </param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Services.PermissionsService.GetPermissionsFor(System.String)">
            <summary>
            Gets all permissions for the specified operation
            </summary>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="T:MethodFitness.Security.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.EntityWithGroups">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; (&apos;{1}&apos; is a member of &apos;{2}&apos;).
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.Everything">
            <summary>
              Looks up a localized string similar to everything.
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.NonUniqueName">
            <summary>
              Looks up a localized string similar to Names must be unique.
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.NotAssociatedWithAnyGroup">
            <summary>
              Looks up a localized string similar to not assoicated with any group.
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.OperationNotDefined">
            <summary>
              Looks up a localized string similar to Operation &apos;{0}&apos; was not defined.
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.PermissionDeniedForUser">
            <summary>
              Looks up a localized string similar to Permission (level {3}) for operation &apos;{0}&apos; was denied to &apos;{1}&apos; on &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.PermissionDeniedForUsersGroup">
            <summary>
              Looks up a localized string similar to Permission (level {4}) for operation &apos;{0}&apos; was denied to group &apos;{1}&apos; on &apos;{2}&apos; (&apos;{3}&apos; is a member of &apos;{5}&apos;).
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.PermissionForOperationNotGrantedToUser">
            <summary>
              Looks up a localized string similar to Permission for operation &apos;{0}&apos; was not granted to user &apos;{1}&apos; or to the groups &apos;{1}&apos; is associated with (&apos;{2}&apos;).
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.PermissionForOperationNotGrantedToUserOnEntity">
            <summary>
              Looks up a localized string similar to Permission for operation &apos;{0}&apos; was not granted to user &apos;{1}&apos; or to the groups &apos;{1}&apos; is associated with (&apos;{2}&apos;) on &apos;{3}&apos; or any of the groups &apos;{3}&apos; is associated with (&apos;{4}&apos;).
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.PermissionGrantedForUser">
            <summary>
              Looks up a localized string similar to Permission (level {3}) for operation &apos;{0}&apos; was granted to &apos;{1}&apos; on &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Properties.Resources.PermissionGrantedForUsersGroup">
            <summary>
              Looks up a localized string similar to Permission (level {4}) for operation &apos;{0}&apos; was granted to group &apos;{1}&apos; on &apos;{2}&apos; (&apos;{3}&apos; is a member of &apos;{5}&apos;).
            </summary>
        </member>
        <member name="T:MethodFitness.Security.Security">
            <summary>
            This class allows to configure the security system
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Security.GetSecurityKeyProperty(System.Type)">
            <summary>
            Gets the security key property for the specified entity type
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Security.Configure``1(NHibernate.Cfg.Configuration,MethodFitness.Security.SecurityTableStructure)">
            <summary>
             Setup NHibernate to include Rhino Security configuration
            </summary>
        </member>
        <member name="T:MethodFitness.Security.SecurityInfo">
            <summary>
            Contains the information about the user that
            rhino security requires.
            </summary>
        </member>
        <member name="M:MethodFitness.Security.SecurityInfo.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MethodFitness.Security.SecurityInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="P:MethodFitness.Security.SecurityInfo.Identifier">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MethodFitness.Security.SecurityInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:MethodFitness.Security.SecurityKeyType">
            <summary>
            What type the security key is
            </summary>
        </member>
        <member name="F:MethodFitness.Security.SecurityKeyType.Type">
            <summary>
            A type
            </summary>
        </member>
        <member name="F:MethodFitness.Security.SecurityKeyType.Instance">
            <summary>
            An instance
            </summary>
        </member>
        <member name="T:MethodFitness.Security.SecurityTableStructure">
            <summary>
            A flag that determains how the security tables should be treated.
            In a separate schema or using a naming convention.
            The default is to put them in a separate schema.
            </summary>
        </member>
        <member name="F:MethodFitness.Security.SecurityTableStructure.Schema">
            <summary>
            Use a "security" schema
            </summary>
        </member>
        <member name="F:MethodFitness.Security.SecurityTableStructure.Prefix">
            <summary>
            Use a "security_" prefix
            </summary>
        </member>
        <member name="T:MethodFitness.Security.Impl.Util.Strings">
            <summary>
            String utility methods
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Impl.Util.Strings.GetParentOperationName(System.String)">
            <summary>
            Gets the name of the parent operation.
            </summary>
            <param name="operationName">Name of the operation.</param>
            <remarks>
            Assumes that there is a '/' in the string
            </remarks>
        </member>
        <member name="M:MethodFitness.Security.Impl.Util.Strings.GetHierarchicalOperationNames(System.String)">
            <summary>
            Gets the names of all the parent operations (including the current one)
            </summary>
            <param name="operationName">Name of the operation.</param>
            <remarks>
            Assumes that there is a '/' in the string
            </remarks>
        </member>
        <member name="M:MethodFitness.Security.Impl.Util.Strings.Join``1(MethodFitness.Security.Model.NamedEntity{``0}[],System.String)">
            <summary>
            Joins the names of all the specified entities.
            </summary>
            <typeparam name="TNamedEntity">The type of the named entity.</typeparam>
            <param name="entities">The entities.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:MethodFitness.Security.Impl.Util.Strings.Join``1(MethodFitness.Security.Model.NamedEntity{``0}[])">
            <summary>
            Joins the names of all the specified entities.
            </summary>
            <typeparam name="TNamedEntity">The type of the named entity.</typeparam>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="T:MethodFitness.Security.Model.UsersGroup">
            <summary>
            A named group for users, which we 
            can define operations on.
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Model.UsersGroup.#ctor">
            <summary>
             Create a new instance of <c>UsersGroup</c>
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Model.UsersGroup.Users">
            <summary>
            Gets or sets the users.
            </summary>
            <value>The users.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.UsersGroup.Parent">
            <summary>
            Gets or sets the parent of this group
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.UsersGroup.DirectChildren">
            <summary>
            Gets or sets the direct children of this group (nested one level)
            </summary>
            <value>The directChildren.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.UsersGroup.AllChildren">
            <summary>
            Gets or sets all children of this users group, at all nesting levels
            </summary>
            <value>All children.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.UsersGroup.AllParents">
            <summary>
            Gets or sets all parent of this users group, at all nesting levels
            </summary>
            <value>All children.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.UsersGroup.Description">
            <summary>
            Gets or sets the Description of this users group
            </summary>
            <value>The Description.</value>
        </member>
        <member name="T:MethodFitness.Security.IUser">
            <summary>
            Provide a way to get the security information from a user instance.
            Used to separate the domain model's user from the requirements of the 
            security systems
            </summary>
        </member>
        <member name="P:MethodFitness.Security.IUser.SecurityInfo">
            <summary>
            Gets or sets the security info for this user
            </summary>
            <value>The security info.</value>
        </member>
        <member name="T:MethodFitness.Security.Model.Operation">
            <summary>
            Represent an operation in the system
            </summary>
        </member>
        <member name="M:MethodFitness.Security.Model.Operation.#ctor">
            <summary>
             Create instance of <c>Operation</c>
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Model.Operation.Comment">
            <summary>
            Gets or sets the comment for this operation
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.Operation.Parent">
            <summary>
            Gets or sets the parent of this operation
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.Operation.Children">
            <summary>
            Gets or sets the children of this operation
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:MethodFitness.Security.Model.Permission">
            <summary>
            Represent a permission on the system, allow (or denying) 
            [operation] for [someone] on [something]
            </summary>
        </member>
        <member name="P:MethodFitness.Security.Model.Permission.Operation">
            <summary>
            Gets or sets the operation this permission applies to
            </summary>
            <value>The operation.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.Permission.Allow">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MethodFitness.Security.Model.Permission"/> is allowing 
            or denying the operation.
            </summary>
            <value><c>true</c> if allow; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.Permission.User">
            <summary>
            Gets or sets the user this permission belongs to.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.Permission.UsersGroup">
            <summary>
            Gets or sets the users group this permission belongs to
            </summary>
            <value>The users group.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.Permission.Level">
            <summary>
            Gets or sets the level of this permission
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:MethodFitness.Security.Model.Permission.Description">
            <summary>
            Gets or sets the Description of this permission
            </summary>
            <value>The Description.</value>
        </member>
        <member name="T:MethodFitness.Security.TextAreaAttribute">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
